# CNN models => 이미지를 조각낸 후 데이터를 쌓아 훈련시킨다.
from keras.models import Sequential

filter_size = 7 # 3*3으로 자른 이미지를 32장 만들어라.
kernel_size = (2, 2) # 이미지를 몇개씩 잘라서 작업 할 것인지 정한다. (3*3)으로 자른다는 의미 (특성을 찾기 위해 자른다.)

from keras.layers import Conv2D, MaxPooling2D

model = Sequential()
# 5-n+1을 하면 output (4*4)란 결과가 나온다.(input_size - kerbel_size + 1)
######################################## padding ###########################################
# Conv2D(32, (5, 5), padding='valid', input_shape=(28, 28, 1), activation='relu')
# input_shape : 샘플 수를 제외한 입력 형태를 정의 합니다. 모델에서 첫 레이어일 때만 정의하면 됩니다.
# (행, 열, 채널 수)로 정의합니다. 흑백영상인 경우에는 채널이 1이고, 컬러(RGB)영상인 경우에는 채널을 3으로 설정합니다.
# padding : 경계 처리 방법을 정의합니다. padding은 output 사이즈를 덮어 씌워준다.
# ‘valid’가 defalt : 유효한 영역만 출력이 됩니다. 따라서 출력 이미지 사이즈는 입력 사이즈보다 작습니다.
# ‘same’ : 출력 이미지 사이즈가 입력 이미지 사이즈와 동일합니다.
# ‘valid’인 경우에는 입력 이미지 영역에 맞게 필터를 적용하기 때문에 출력 이미지 크기가 입력 이미지 크기보다 작아집니다. 
# 반면에 ‘same’은 출력 이미지와 입력 이미지 사이즈가 동일하도록 입력 이미지 경계에 빈 영역을 추가하여 필터를 적용합니다. 
# ‘same’으로 설정 시, 입력 이미지에 경계를 학습시키는 효과가 있습니다.
#############################################################################################
model.add(Conv2D(filter_size, kernel_size, padding = 'same', input_shape = (10, 10, 1))) 
# filter_size = output // input_shape(이미지를 넣겠다) = (28, 28, 1) =>(가로, 세로, 1 = 흑백) 3 = 컬러
# 7을 35로 나누어 5가 나오면 5의 의미는  => 2*2 +1 (1 은 bias)
#model.add(Conv2D(16,(2,2)))
# MaxPooling2D 겹치게 자르지 않고 그 자른 값에서 특성이 가장 특성이 큰 하나의 값을 뽑아 내는 방법 
model.add(MaxPooling2D(3,3))
# model.add(Conv2D(8,(2,2)))
model.add(Flatten())


model.summary()
'''
Layer (type)                 Output Shape              Param #
=================================================================
conv2d_1 (Conv2D)            (None(행), 4, 4, 7)           35          # (4,4,7장) 7 = (2*2), 4*4*7 // 5*5 짜리를 2*2로 잘라 7장을 만들어라는 의미
=================================================================
conv2d_2 (Conv2D)            (None, 2, 2, 16)          1024
=================================================================
# 7을 35로 나누어 5가 나오면 5의 의미는  => 2*2 +1 (1 은 bias)
Total params: 35
Trainable params: 35
Non-trainable params: 0

###################### activation : 활성화 함수 설정합니다 ###############################
# ‘linear’ : 디폴트 값, 입력뉴런과 가중치로 계산된 결과값이 그대로 출력으로 나옵니다.
# ‘relu’ : rectifier 함수, 은익층에 주로 쓰입니다.
# ‘sigmoid’ : 시그모이드 함수, 이진 분류 문제에서 출력층에 주로 쓰입니다.
# ‘softmax’ : 소프트맥스 함수, 다중 클래스 분류 문제에서 출력층에 주로 쓰입니다.
#########################################################################################
'''